import socket
import threading
import queue
import requests
import os
import base64
import json
from random import randrange

#Change values for your server here
HOST='IP_OF_YOUR_SERVER'
PORT=65432
Do_we_use_stable_diffusion=True

if HOST=="IP_OF_YOUR_SERVER":
    print(f"ERROR!\nPlease set the IP address and port of your server in this Python file (receive_prompts.py).")
    exit(-1)

#Using a queue, so that it will automatically manage multiple prompts from users
task_queue = queue.Queue()

#Function that accepts dictionary from the users. Using 4096 bytes just in case, didn't test with different amounts of bytes
def handle_client(client_socket):
    with client_socket:
        while True:
            try:
                data = client_socket.recv(4096)
                if not data:
                    break
                received_list = json.loads(data.decode('utf-8'))
                print(f"Received: {received_list}")
                task_queue.put(received_list)
            except Exception as e:
                print(f"Client connection error: {e}")
                break
#This is where data received from the user will be send to a local Automatic1111 Stable-Diffusion API server
#All the generated images will go to the folder "generated_images".
#If you don't want to use Stable-Diffusion, then the variable "task" contains full dictionary that user sent over, so you can do whatever you want with it.
def process_queue():
    global Do_we_use_stable_diffusion
    while True:
        task = task_queue.get()
        print(f"Processing: {task}")
        if Do_we_use_stable_diffusion:
            if not os.path.exists('generated_images'):
                os.mkdir('generated_images')
            url="http://127.0.0.1:7860" #Change this value if you run on a different machine and/or port.
            time=task.get('time')
            prompt=task.get('text')
            color=task.get('color')
            width=task.get('width')
            height=task.get('height')
            random_seed=int(randrange(4294967294)) #Just in case, might be unnecessary
            #This is a paylod for Automatic1111 Stable-Diffusion API server, generated by API payload display (https://github.com/huchenlei/sd-webui-api-payload-display).
            payload={"alwayson_scripts": {"Comments": {"args": []}, "Extra options": {"args": []}, "Hypertile": {"args": []}, "Refiner": {"args": [False, "", 0.8]}, "Seed": {"args": [-1, False, -1, 0, 0, 0]}}, "batch_size": 1, "cfg_scale": 5, "comments": {}, "denoising_strength": 0.7, "disable_extra_networks": False, "do_not_save_grid": False, "do_not_save_samples": False, "enable_hr": False, "height": height, "hr_negative_prompt": "", "hr_prompt": "", "hr_resize_x": 0, "hr_resize_y": 0, "hr_scale": 2, "hr_second_pass_steps": 0, "hr_upscaler": "Latent", "n_iter": 1, "negative_prompt": "", "override_settings": {}, "override_settings_restore_afterwards": True, "prompt": prompt, "restore_faces": True, "s_churn": 0.0, "s_min_uncond": 0, "s_noise": 1.0, "s_tmax": None, "s_tmin": 0.0, "sampler_name": "DPM++ SDE Karras", "script_args": [], "script_name": None, "seed": random_seed, "seed_enable_extras": True, "seed_resize_from_h": -1, "seed_resize_from_w": -1, "steps": 30, "styles": [], "subseed": -1, "subseed_strength": 0, "tiling": False, "width": width}
            try:
                response=requests.post(url=f'{url}/sdapi/v1/txt2img',json=payload)
                r=response.json()
                if len(os.listdir('generated_images'))>0:
                    index=max([int(file.split('.')[0]) for file in os.listdir('generated_images') if '_without_restore' not in file])
                else:
                    index=-1
                with open(f"generated_images/{index+1}.png","wb") as f:
                    f.write(base64.b64decode(r['images'][0]))
                with open(f"generated_images/{index+1}.txt","w",encoding='utf-8') as f:
                    f.write(f"{time}\n{color}\n{prompt}\nw:{width}\nh:{height}")
            except requests.exceptions.ConnectionError:
                print(f"ERROR!\nStable Diffusion API is not running at {url}. Turning off this feature for now.")
                Do_we_use_stable_diffusion=False
        if not Do_we_use_stable_diffusion:
            print("Stable Diffusion is turned off")
            #Write your script here, if you don't want to use stable-diffusion
        print(f"Finished processing: {task}")
        task_queue.task_done()
#Starting the server itself
def server_main():
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind((HOST,PORT))
    server.listen()
    print(f"Server {HOST} listening on port {PORT}")
    threading.Thread(target=process_queue, daemon=True).start()
    while True:
        try:
            client_socket, addr = server.accept()
            print(f"Accepted connection from {addr}")
            threading.Thread(target=handle_client, args=(client_socket,), daemon=True).start()
        except KeyboardInterrupt:
            print("\nShutting down server.")
            break
        except Exception as e:
            print(f"Server error: {e}")
if __name__ == "__main__":
    server_main()
